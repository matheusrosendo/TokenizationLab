{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","async","ethereum","web3","Web3","enable","error","console","log","provider","providers","HttpProvider","on","accounts","location","reload","App","Component","constructor","props","super","state","loaded","contractOwner","whitelisted","kycAddress","ethAmountToBuyToken","ethAccountAmmount","cappuAccountAmmount","isToWhitelist","errorMessage","mochaTotalSupply","componentDidMount","this","eth","getAccounts","networkId","net","getId","instanceMyMintableToken","Contract","MyMintableToken","abi","networks","address","instanceMyMintableTokenSale","MyMintableTokenSale","instanceKycContract","KycContract","owner","methods","call","isWhitelisted","kycWhitelisted","updateUserTokens","listenToTokenTransfer","setState","whitelistAddress","alert","message","handleError","handleInputChange","event","target","value","type","checked","name","handleBuyToken","self","sendTransaction","from","to","_address","hash","document","getElementById","innerHTML","receipt","blockHash","receiptTrans","confirmationNumber","JSON","parse","slice","length","data","handleKycWhiteListing","setKycWhitelisted","send","setKycRevoked","_errorMessage","addTokenToMetamask","symbol","decimals","tokenAdded","request","method","params","options","image","inMochaAccountAmmount","balanceOf","inEthAccountAmmount","utils","fromWei","getBalance","inMochaTotalSupply","totalSupply","inEthAccountAmmountInString","substring","events","Transfer","reactInstance","render","className","id","placeholder","onChange","for","onClick","Boolean","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3b97d263.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n\n    //refresh page if account is changed\n    window.ethereum.on('accountsChanged', function (accounts) {\n      window.location.reload();\n    })\n    \n    //refresh page if chain is changed\n    window.ethereum.on('chainChanged', () => {\n      window.location.reload();\n    })\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport MyMintableToken from \"./contracts/MyMintableToken.json\";\nimport MyMintableTokenSale from \"./contracts/MyMintableTokenSale.json\";\nimport KycContract from \"./contracts/KycContract.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { loaded: false, contractOwner: false, whitelisted: false, kycAddress:\"\", ethAmountToBuyToken:1000, ethAccountAmmount:0, cappuAccountAmmount:0, isToWhitelist: \"allow\", errorMessage: \"\", mochaTotalSupply: 0};\n\n  //put the instance in a window to be acessed externaly\n  constructor(props) {\n      super(props);\n      window.reactInstance = this;\n  }\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      this.web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      this.accounts = await this.web3.eth.getAccounts();\n\n      // Get the network data\n      this.networkId = await this.web3.eth.net.getId();\n      \n      //get the contract instances\n      this.instanceMyMintableToken = new this.web3.eth.Contract(\n        MyMintableToken.abi,\n        MyMintableToken.networks[this.networkId] && MyMintableToken.networks[this.networkId].address,\n      );\n\n      this.instanceMyMintableTokenSale = new this.web3.eth.Contract(\n        MyMintableTokenSale.abi,\n        MyMintableTokenSale.networks[this.networkId] && MyMintableTokenSale.networks[this.networkId].address,\n      );\n      \n      \n      this.instanceKycContract = new this.web3.eth.Contract(\n        KycContract.abi,\n        KycContract.networks[this.networkId] && KycContract.networks[this.networkId].address,\n      );\n\n      //get the owner of the contract\n      let owner = await this.instanceKycContract.methods.owner().call();\n      \n      //verify if current address is whitelisted\n      this.isWhitelisted = await this.instanceKycContract.methods.kycWhitelisted(this.accounts[0]).call();\n      \n      //get the balances on loading page\n      await this.updateUserTokens();\n\n      //refresh balances every event Transfer\n      await this.listenToTokenTransfer();\n      this.setState({ loaded: true, contractOwner: owner===this.accounts[0], whitelisted: this.isWhitelisted, whitelistAddress: true, errorMessage:\"\" });\n     \n    } catch (error) {\n      alert(\n        'Failed to load web3, accounts, or contract. Check console for details. Error: '+error.message\n      );\n      this.handleError(error);\n    }\n  };\n\n  /**\n   * Handle form inputs on change\n   * @param {*} event \n   */\n\n  handleInputChange = (event) => {\n     const target = event.target;\n     const value = target.type === \"checkbox\" ? target.checked : target.value;\n     const name = target.name;\n     this.setState({[name]: value});\n  }\n \n  /**\n   * handle buy token function\n   */\n handleBuyToken = async () => {\n    //in order to get global access inside the callback function \n    let self = this;\n    await this.web3.eth.sendTransaction({from:this.accounts[0], to:this.instanceMyMintableTokenSale._address, value:this.state.ethAmountToBuyToken})\n    .on('transactionHash', function(hash){\n      document.getElementById(\"transactionHash\").innerHTML = hash;\n    })\n    .on('receipt', function(receipt){\n      document.getElementById(\"receipt\").innerHTML = receipt.blockHash;\n      window.receiptTrans = receipt;\n    })\n    .on('confirmation', async function(confirmationNumber, receipt){\n      document.getElementById(\"confirmation\").innerHTML = \"Number of confirmations: \"+confirmationNumber;\n      document.getElementById(\"infoMessage\").innerHTML = self.state.kycAddress+ \" Tokens bought successfully\";\n    })\n    .on('error', function(error, receipt) {\n      \n      let errorMessage = \"\";\n      try {\n        //slice returned error to get only message inside\n        errorMessage = JSON.parse(error.message.slice(58, error.message.length-2)).data.message;\n      } catch (error) {\n        errorMessage = error.message;\n      }\n      self.handleError({errorMessage: errorMessage});\n      \n    });\n  }\n\n  /**\n   * Whitelist handler: allow a given address to buy tokens (Owner only)\n   */\n  handleKycWhiteListing = async () => {\n    //in order to get global access inside the callback function \n    let self = this;\n    try {\n              \n      if(this.state.isToWhitelist === \"allow\"){\n        //self.inAddressArray = this.state.kycAddresses.split(\",\");\n        await this.instanceKycContract.methods.setKycWhitelisted(this.state.kycAddress).send({from: this.accounts[0]})\n        .on('transactionHash', function(hash){\n          document.getElementById(\"transactionHash\").innerHTML = hash;\n        })\n        .on('receipt', function(receipt){\n          document.getElementById(\"receipt\").innerHTML = receipt.blockHash;\n        })\n        .on('confirmation', function(confirmationNumber, receipt){\n          document.getElementById(\"confirmation\").innerHTML = \"Number of confirmations: \"+confirmationNumber;\n          document.getElementById(\"infoMessage\").innerHTML =  self.state.kycAddress+ \" was whitelisted successfully\";\n        })\n        .on('error', function(error, receipt) {\n          //slice returned error to get only message inside\n          var errorMessage = JSON.parse(error.message.slice(58, error.message.length-2));\n          self.handleError(errorMessage.data.message);\n        });\n            \n      } else { //revoke address\n        await this.instanceKycContract.methods.setKycRevoked(this.state.kycAddress).send({from: this.accounts[0]})\n        .on('transactionHash', function(hash){\n          document.getElementById(\"transactionHash\").innerHTML = hash;\n        })\n        .on('receipt', function(receipt){\n          document.getElementById(\"receipt\").innerHTML = receipt.blockHash;\n        })\n        .on('confirmation', function(confirmationNumber, receipt){\n          document.getElementById(\"confirmation\").innerHTML = \"Number of confirmations\"+confirmationNumber;\n          document.getElementById(\"infoMessage\").innerHTML = self.state.kycAddress+ \" was revoked from whitelist\";\n        })\n        .on('error', function(error, receipt) {\n          //slice returned error to get only message inside\n          var errorMessage = JSON.parse(error.message.slice(58, error.message.length-2));\n          self.handleError(errorMessage.data.message);\n        });        \n        \n      };\n    } catch (error) {\n        this.handleError(error);\n    }\n  }\n\n/**\n * Generic display of errors\n * @param {*} _errorMessage \n */\nhandleError = (_errorMessage) =>{\n  try {\n    document.getElementById(\"error\").innerHTML = _errorMessage;\n    this.setState({errorMessage: _errorMessage});\n  } catch (error) {\n    this.setState({errorMessage: error});\n  }  \n}\n\n/**\n * Button ADD Token to metamask handler\n */\naddTokenToMetamask = async () =>{\n    try {\n      const symbol = await this.instanceMyMintableToken.methods.symbol().call();\n      const decimals = await this.instanceMyMintableToken.methods.decimals().call();\n      console.log(\"decimals \"+decimals);\n      const tokenAdded = await window.ethereum.request({\n        method: 'wallet_watchAsset',\n        params: {\n          type: 'ERC20',\n          options: {\n            address: this.instanceMyMintableToken._address,\n            symbol: symbol,\n            decimals: decimals,\n            image: 'https://www.starbucksathome.com/pt/sites/default/files/2021-06/10032021_CafeMocha_CS-min.png'\n          }\n        }\n      });\n      if(tokenAdded){\n        document.getElementById(\"infoMessage\").innerHTML = symbol+ \" adicionado com sucesso\";\n      } else {\n        document.getElementById(\"infoMessage\").innerHTML = symbol+ \" nao foi possivel adicionar o token\";\n      }\n    } catch (error) {\n      this.handleError(error);\n    }\n }\n\n /**\n  * Refresh balances of ETH and MOCHA tokens and set to state\n  */\n updateUserTokens = async () => {\n  let inMochaAccountAmmount = await this.instanceMyMintableToken.methods.balanceOf(this.accounts[0]).call();\n  let inEthAccountAmmount = this.web3.utils.fromWei(await this.web3.eth.getBalance(this.accounts[0]), 'ether'); \n  let inMochaTotalSupply = await this.instanceMyMintableToken.methods.totalSupply().call();\n  let inEthAccountAmmountInString = \"0.0\";\n  if(inEthAccountAmmount > 0) {\n    inEthAccountAmmountInString = inEthAccountAmmount.substring(0,5);\n  }\n  this.setState({ ethAccountAmmount:inEthAccountAmmountInString, cappuAccountAmmount: inMochaAccountAmmount, mochaTotalSupply: inMochaTotalSupply});\n }\n\n\n /**\n  * Refresh balances every time event Transfer is listened sendind from or to the current address \n  */\n listenToTokenTransfer = async() => {\n   this.instanceMyMintableToken.events.Transfer({to: this.accounts[0]}).on(\"data\", this.updateUserTokens);\n   this.instanceMyMintableToken.events.Transfer({from: this.accounts[0]}).on(\"data\", this.updateUserTokens);\n }\n\n  render() {\n   \n    if (!this.state.loaded) {\n      return (\n       <div className=\"container\"> \n         <div className=\"plaintext\">Loading Web3, accounts, and contract...</div>\n       </div>\n      )\n    } else {\n      if(this.state.contractOwner){\n        return (\n          <div>\n           <div  className=\"plaintext\">connected account: {this.accounts[0]}  --- ETH: {this.state.ethAccountAmmount} / MOCHA: {this.state.cappuAccountAmmount} </div>\n            <div className=\"container\"> \n             \n              <div className=\"form\">              \n                <div className=\"subtitle2\">Current TOTAL SUPPLY = {this.state.mochaTotalSupply} MOCHA Tokens</div>\n                <div className=\"title\">StarDucks Mochacino IDO (Mintable Tokens)</div>\n                <div className=\"subtitle\">Welcome manager! This is your Kyc Whitelisting page.</div>\n                <div className=\"input-container ic1\">\n                  <input id=\"allowAddress\"  type=\"radio\" placeholder=\" \" checked  name=\"isToWhitelist\" value=\"allow\" onChange={this.handleInputChange} />\n                  <label for=\"allowAddress\" className=\"radioLabel\">Allow Address</label>\n                </div>\n                <div className=\"input-container ic1\">\n                  <input id=\"revokeAddress\"  type=\"radio\" placeholder=\" \"  name=\"isToWhitelist\" value=\"revoke\" onChange={this.handleInputChange} />\n                  <label for=\"revokeAddress\" className=\"radioLabel\">Revoke Address</label>\n                </div>\n                <div className=\"input-container ic1\">\n                  <input id=\"firstname\" className=\"input\" type=\"text\" placeholder=\"\"  name=\"kycAddress\" value={this.state.kycAddress} onChange={this.handleInputChange} />\n                  <div className=\"cut\"></div>\n                  <label className=\"placeholder\">Address (0x123...)</label>\n                </div>\n                \n                <button type=\"button\" className=\"submit\" onClick={this.handleKycWhiteListing}>Update KYC Whitelist</button>\n              </div>\n               \n              <div className=\"warning\" id=\"infoMessage\"></div>\n              <div className=\"plaintext\" id=\"transactionHash\">transactionHash</div>\n              <div className=\"plaintext\" id=\"receipt\">Receipt</div>\n              <div className=\"plaintext\" id=\"confirmation\">Confirmations</div>\n              <div className=\"warning\" id=\"error\"></div>\n              \n            </div>\n          </div>\n        );\n      } else {\n        if(this.state.whitelisted){\n            return (\n              <div>\n                <div  className=\"plaintext\">connected account: {this.accounts[0]}  --- ETH: {this.state.ethAccountAmmount} / MOCHA: {this.state.cappuAccountAmmount} </div>\n                <div className=\"container\"> \n                  <div className=\"form2\">\n                    <div className=\"subtitle2\">Current TOTAL SUPPLY = {this.state.mochaTotalSupply} MOCHA Tokens</div>\n                    <div className=\"title\">StarDucks Mochacino IDO (Mintable Tokens)</div>\n                    <div className=\"subtitle\">You are whitelisted!</div>\n               \n                    <div className=\"input-container ic1\">\n                      <input id=\"firstname\" className=\"input\" type=\"text\" placeholder=\"\" name=\"ethAmountToBuyToken\" value={this.state.ethAmountToBuyToken} onChange={this.handleInputChange} />\n                      <div className=\"cut\"></div>\n                      <label className=\"placeholder\">ETH amount in wei</label>\n                    </div>                    \n                    <p>\n                      <button type=\"button\"  className=\"submit\" onClick={this.handleBuyToken}> Buy MOCHA Token</button>\n                      <button type=\"button\"  id=\"addToken\"  className=\"submit\" onClick={this.addTokenToMetamask}> Add MOCHA Token to metamask wallet</button>\n                    </p>                    \n                  </div>  \n                  <div className=\"warning\" id=\"infoMessage\"></div>\n                  <div className=\"plaintext\" id=\"transactionHash\">transactionHash</div>\n                  <div className=\"plaintext\" id=\"receipt\">Receipt</div>\n                  <div className=\"plaintext\" id=\"confirmation\">Confirmations</div>\n                  <div className=\"warning\" id=\"error\"></div>\n                </div>     \n              </div>\n            );\n        } else {\n          return (\n            <div>\n              <div  className=\"plaintext\">connected account: {this.accounts[0]}  --- ETH: {this.state.ethAccountAmmount} / MOCHA: {this.state.cappuAccountAmmount} </div>\n              <div className=\"container\"> \n                <div className=\"form2\">\n                  <div className=\"title\">StarDucks Mochacino IDO</div>\n                  <div className=\"subtitle\">Sorry, you are not whitelisted!</div>\n                </div>\n              </div>\n            </div>\n          );\n        }\n      }\n    }\n    \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}